jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: dotnet build
  #----------------TEST-------------------------
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=opencover --logger=trx
  #-----------------ANALYZE------------------------
  analyze:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN}}
    needs:
      - build
      - test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: dotnet tool install --global dotnet-sonarscanner
      - run: |
          dotnet sonarscanner begin -k:'Music-Garden_webapi' -o:'music-garden' -d:sonar.host.url='https://sonarcloud.io' -d:sonar.login=$SONAR_TOKEN -d:sonar.cs.opencover.reportsPaths='./test_coverage/*.xml' -d:sonar.cs.vstest.reportsPaths='./test_result/*.trx'
          dotnet build
          dotnet sonarscanner end -d:sonar.login=$SONAR_TOKEN

  #-------------------PACKAGE-----------------------------
  package:
    env:
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
    needs:
      - build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - run: docker image build -f Dockerfile -t musicgarden/webapi .
      - run: docker image push musicgarden/webapi
      - run: docker logout

  #----------------------DEPLOY------------------------------
  deploy:
    needs:
      - package
    runs-on: ubuntu-20.04
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/webapps-deploy@v2
        with:
          app-name: musicgardenwebapi
          images: musicgarden/webapi

name: ci-pipeline
on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]
